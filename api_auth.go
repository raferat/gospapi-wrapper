/*
 * KSP API
 *
 * API pro interakci s webem KSP.
 *
 * API version: 1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package kspapi_wrapper

import (
	"context"
	"io"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type AuthApiService service

/*
AuthApiService Interní: Vytvoří dočasný token na základě cookie.
Vytvoří uživateli přihlášenému na webu KSP dočasný API token. Je určeno k použití z JavaScriptu na webu KSP, použití z jiných domén není kvůli cross-origin omezením možné. **Nepoužívejte bez domluvy. Chování se může kdykoliv změnit.**
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse200
*/
func (authService *AuthApiService) AuthXGetTokenPost(ctx context.Context) (InlineResponse200, *http.Response, error) {
	var (
		requestBody       interface{}
		localVarFileBytes []byte
		parsedResp        InlineResponse200
	)

	// create path and map variables
	requestPath := authService.client.cfg.BasePath + "/auth/x-get-token"

	requestHeaders := make(map[string]string)

	// set Accept header
	requestHeaders["Accept"] = "application/json"

	r, err := authService.client.prepareRequest(ctx, requestPath, "POST", requestBody, requestHeaders, url.Values{}, url.Values{}, "", localVarFileBytes)
	if err != nil {
		return parsedResp, nil, err
	}

	response, err := authService.client.callAPI(r)
	if err != nil || response == nil {
		return parsedResp, response, err
	}

	retreivedBody, err := io.ReadAll(response.Body)
	response.Body.Close()
	if err != nil {
		return parsedResp, response, err
	}

	if response.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = authService.client.decode(&parsedResp, retreivedBody, response.Header.Get("Content-Type"))
		if err == nil {
			return parsedResp, response, err
		}
	}

	newErr := GenericSwaggerError{
		body:  retreivedBody,
		error: response.Status,
	}

	return parsedResp, response, newErr
}
